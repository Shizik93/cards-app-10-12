{"version":3,"sources":["common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","common/c8-SuperDoubleRange/SuperDoubleRange.module.css","pages/Test/test.module.css","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","common/c4-SuperEditableSpan/SuperEditableSpan.tsx","common/c5-SuperSelect/SuperSelect.tsx","common/c6-SuperRadio/SuperRadio.tsx","common/c7-SuperRange/SuperRange.tsx","common/c8-SuperDoubleRange/SuperDoubleRange.tsx","pages/Test/Test.tsx","pages/Error.tsx","pages/Header.tsx","pages/Login.tsx","pages/NewPassword.tsx","pages/Profile.tsx","pages/Registration.tsx","pages/RestorePassword.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","style","borderRadius","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","SuperSelect","options","onChangeOption","mappedOptions","map","f","i","SuperRadio","name","onChangeCallback","o","SuperRange","onChangeRange","finalRangeClassName","range","SuperDoubleRange","props","wrapper","min","double","max","Test","test","Error","PATH","Header","to","Login","NewPassword","Profile","Registration","RestorePassword","App","element","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21b29ec5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__WuyFe\",\"input\":\"SuperInputText_input__1XNDN\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1wekg\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"double\":\"SuperDoubleRange_double__j_YjA\",\"wrapper\":\"SuperDoubleRange_wrapper__jJdK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"test_test__3Z_re\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className,\n        spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${error? s.errorInput:s.superInput}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span style={{borderRadius:'48px'}} className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n        <input\n        type={'checkbox'}\n        onChange={onChangeCallback}\n        className={finalInputClassName}\n\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n        />\n        {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox\n\n\n/*\n<label>\n<input\ntype={'checkbox'}\nonChange={onChangeCallback}\nclassName={finalInputClassName}\n\n{...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n/>\n{children && <span className={s.spanClassName}>{children}</span>}\n</label> // благодаря label нажатие на спан передастся в инпут\n*/\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\nimport SuperInputText from '../c1-SuperInputText/SuperInputText'\n\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n}\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\n\n    const onEnterCallback = () => {\n\n        setEditMode(false) // выключить editMode при нажатии Enter\n\n        onEnter && onEnter()\n    }\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false) // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e)\n    }\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true)\n        onDoubleClick && onDoubleClick(e)\n    }\n\n    const spanClassName = `${''} ${className}`\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    )\n}\n\nexport default SuperEditableSpan\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: any[] = options ? options.map((f, i) => {\n            return (\n                <option key={i+'-'+f} value={f}>{f}</option>\n\n            )\n        }\n    ) : []; // map options with key\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n        // onChange, onChangeOption\n    }\n\n    return (\n        <select onChange={onChangeCallback} {...restProps}>\n            {mappedOptions}\n        </select>\n    )\n}\n\nexport default SuperSelect\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange&&onChange(e)\n        onChangeOption&&onChangeOption(e.currentTarget.value)\n\n        // onChange, onChangeOption\n    }\n\n\n    const mappedOptions: any[] = options ? options.map((o, i) => (\n        <label key={name + '-' + i}>\n            <input onChange={onChangeCallback}\n                type={'radio'}\n                   name={name}\n                   checked={o===value}\n                   value={o}\n\n                // name, checked, value, onChange\n            />\n            {o}\n        </label>\n    )) : []\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    )\n}\n\nexport default SuperRadio\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperRange.module.css'\n\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeRange?: (value: number) => void\n};\n\nconst SuperRange: React.FC<SuperRangePropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeRange,\n        className,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e) // сохраняем старую функциональность\n\n        onChangeRange && onChangeRange(+e.currentTarget.value)\n    }\n\n    const finalRangeClassName = `${s.range} ${className ? className : ''}`\n\n    // @ts-ignore\n    return (\n        <>\n            <input\n                value={restProps.value}\n                type={'range'}\n                onChange={onChangeCallback}\n                className={finalRangeClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n        </>\n    )\n}\n\nexport default SuperRange\n","import React from 'react'\nimport style from './SuperDoubleRange.module.css'\nimport SuperRange from \"../c7-SuperRange/SuperRange\";\n\n\ntype SuperDoubleRangePropsType = {\n    onChangeRange?: (value: number[]) => void\n    value?: [number, number]\n    // min, max, step, disable, ...\n}\n\nexport const SuperDoubleRange = (props:SuperDoubleRangePropsType) => {\n    // сделать самому, можно подключать библиотеки\n\n    const onChangeMax=(max:number)=>{\n        if(props.onChangeRange&&props.value)\n        if(props.value[0] <= props.value[1] - 5) {\n            props.onChangeRange([props.value[0], max])\n        } else {\n            max >= 5 ? props.onChangeRange([max - 5, max]) : props.onChangeRange([0, max])\n        }\n    }\n    const onChangeMin = (min:number) => {\n        if(props.onChangeRange&&props.value)\n      if(props.value[0]<=props.value[1]-5){\n          props.onChangeRange([min,props.value[1]])\n      }\n      else{\n          min<=95?props.onChangeRange([min,min+5]):props.onChangeRange([min,props.value[1]])\n      }\n    }\n\n    return (\n     <div className={style.wrapper}>\n    <SuperRange  value={props.value&&props.value[0]} onChangeRange={onChangeMin}/>\n    <SuperRange className={style.double} value={props.value&&props.value[1]} onChangeRange={onChangeMax}/>\n     </div>\n    )\n}\n\n\n","import React from \"react\";\nimport SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../../common/c3-SuperCheckbox/SuperCheckbox\";\nimport SuperEditableSpan from \"../../common/c4-SuperEditableSpan/SuperEditableSpan\";\nimport SuperSelect from \"../../common/c5-SuperSelect/SuperSelect\";\nimport SuperRadio from \"../../common/c6-SuperRadio/SuperRadio\";\nimport SuperRange from \"../../common/c7-SuperRange/SuperRange\";\nimport {SuperDoubleRange} from \"../../common/c8-SuperDoubleRange/SuperDoubleRange\";\nimport style from './test.module.css'\nexport const Test = () => {\n  return(\n      <div className={style.test}>\n        <SuperInputText/>\n          <SuperButton>+</SuperButton>\n          <SuperCheckbox/>\n          <SuperEditableSpan/>\n          <SuperSelect/>\n          <SuperRadio/>\n          <SuperRange/>\n          <SuperDoubleRange/>\n\n\n      </div>\n  )\n}","import React from \"react\";\n\nexport const Error = () => {\n  return(\n      <div>\n          Error 404\n      </div>\n  )\n}","import {NavLink} from \"react-router-dom\";\n\nexport const PATH = {\n    ERROR_404: 'error404',\n    LOGIN: 'login',\n    NEW_PASSWORD: 'new-password',\n    PROFILE: 'profile',\n    REGISTRATION: 'registration',\n    RESTORE_PASSWORD: 'restore-password',\n    TEST: 'test',\n\n}\n\nexport const Header = () => {\n    return (\n        <div>\n            <NavLink to={PATH.LOGIN}>Login </NavLink>\n            <NavLink to={PATH.NEW_PASSWORD}>New-Password </NavLink>\n            <NavLink to={PATH.PROFILE}>Profile </NavLink>\n            <NavLink to={PATH.REGISTRATION}>Registration </NavLink>\n            <NavLink to={PATH.RESTORE_PASSWORD}> Restore-Password </NavLink>\n            <NavLink to={PATH.TEST}>Test </NavLink>\n            <NavLink to={PATH.ERROR_404}>Error </NavLink>\n        </div>\n    )\n}","import React from \"react\";\n\nexport const Login = () => {\n  return(\n      <div>\n          Login\n      </div>\n  )\n}","import React from \"react\";\n\nexport const NewPassword = () => {\n  return(\n      <div>\n          NewPassword\n      </div>\n  )\n}","import React from \"react\";\n\nexport const Profile = () => {\n  return(\n      <div>\n          Profile\n      </div>\n  )\n}","import React from \"react\";\n\nexport const Registration = () => {\n  return(\n      <div>\n          Registration\n      </div>\n  )\n}","import React from \"react\";\n\nexport const RestorePassword = () => {\n  return(\n      <div>\n          Restore Password\n      </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport {Test} from './pages/Test/Test';\nimport {Route, Routes} from \"react-router-dom\";\nimport {Error} from \"./pages/Error\";\nimport {Header, PATH} from \"./pages/Header\";\nimport {Login} from \"./pages/Login\";\nimport {NewPassword} from \"./pages/NewPassword\";\nimport {Profile} from \"./pages/Profile\";\nimport {Registration} from \"./pages/Registration\";\nimport {RestorePassword} from \"./pages/RestorePassword\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Routes>\n                <Route element={<Error/>} path={PATH.ERROR_404}/>\n                 <Route element={<Login/>} path={PATH.LOGIN}/>\n                 <Route element={<NewPassword/>} path={PATH.NEW_PASSWORD}/>\n                 <Route element={<Profile/>} path={PATH.PROFILE}/>\n                 <Route element={<Registration/>} path={PATH.REGISTRATION}/>\n                 <Route element={<RestorePassword/>} path={PATH.RESTORE_PASSWORD}/>\n                 <Route element={<Test/>} path={PATH.TEST}/>\n                <Route element={<Error/>} path={'*'}/>\n\n            </Routes>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}